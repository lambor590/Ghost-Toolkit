name: Build

on:
  push:
    branches: '**'
    paths:
      - "**.rs"
      - ".github/workflows/build.yml"
      - "Cargo.lock"
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - name: Create `out/`
        run: mkdir out

      # Install Rust on the various platforms

      - name: Install Rust for macOS
        if: matrix.os == 'macos-latest'
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin, x86_64-apple-darwin

      - name: Install Rust for Windows
        if: matrix.os == 'windows-latest'
        uses: dtolnay/rust-toolchain@stable

      - name: Install Rust for Linux
        if: matrix.os == 'ubuntu-latest'
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-gnu, x86_64-unknown-linux-musl, aarch64-unknown-linux-musl

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install gcc-mingw-w64-x86-64 musl musl-tools gcc-aarch64-linux-gnu
          curl https://apt.llvm.org/llvm.sh | sudo bash -s 17

      - name: Install Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Lint code
        run: cargo clippy

      - name: Run tests
        run: cargo test --no-default-features

      - name: Build macOS Intel
        if: matrix.os == 'macos-latest'
        run: |
          cargo build --target=x86_64-apple-darwin --release
          cp target/x86_64-apple-darwin/release/ghost-toolkit out/ghost-toolkit-macos-x64

      - name: Build macOS ARM
        if: matrix.os == 'macos-latest'
        run: |
          cargo build --target=aarch64-apple-darwin --release
          cp target/aarch64-apple-darwin/release/ghost-toolkit out/ghost-toolkit-macos-arm

      - name: Build Windows MSVC
        if: matrix.os == 'windows-latest'
        run: |
          cargo build --target=x86_64-pc-windows-msvc --release
          copy "target\x86_64-pc-windows-msvc\release\ghost-toolkit.exe" "out\ghost-toolkit-windows-msvc.exe"

      - name: Build Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          cargo build --target=x86_64-unknown-linux-musl --release
          cp target/x86_64-unknown-linux-musl/release/ghost-toolkit out/ghost-toolkit-linux-x64

      - name: Build ARM Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          cargo rustc --target=aarch64-unknown-linux-musl --release -- -Clink-self-contained=yes -Clinker=rust-lld
          cp target/aarch64-unknown-linux-musl/release/ghost-toolkit out/ghost-toolkit-linux-arm64
        env:
          CC_aarch64_unknown_linux_musl: clang-17

      - name: Build Windows GNU
        if: matrix.os == 'ubuntu-latest'
        run: |
          cargo build --target=x86_64-pc-windows-gnu --release
          copy "target\x86_64-pc-windows-gnu\release\ghost-toolkit.exe" "out\ghost-toolkit-windows-gnu.exe"

      - name: Upload build artefacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.os }}
          path: out/ghost-toolkit*
          if-no-files-found: error